/*
 * YOLO Downloader for M5Stack-SD-Updater 
 * Copyright (2018) tobozo
 * 
 * Requires: a valid WiFi connection (use an external app for that
 * or connect as WIFI_STA at least once from your M5Stack).
 * 
 * Downloads unsigned binaries using an unencrypted HTTP connection
 * from an untrusted source and saves the binaries onto the MicroSD
 * for later execution. It sounds cooler than having to copy the 
 * binaries manually onto the SD Card but from a security point of
 * view it's totally creepy.
 * 
 * You run this at your own risks!!
 * 
 * Only a size comparison is made to decide if an existing file needs 
 * to be overwritten or left alone.
 * 
 * Risks:
 *  - MITM attacks
 *  - DNS spoofing
 *  - HTTP spoofing
 *  - Binary spoofing 
 *  - Executing arbitrary binary in the M5Stack's context, leading to:
 *    - beaconing
 *    - being remotely updateable
 *    - exposing the registered WiFi connections
 *    - leaking of actual WiFi credentials
 *    
 * Mitigations:
 *  - run a sketch with WiFi.disconnect() to clear current credentials
 *  - create expendable, temporary WiFi credentials
 *  - isolate the traffic from your network
 *  - use a public WiFi
 *  - revoke WiFi credentials right after the download is done
 *  - burn this sketch after reading
 * 
 * ToDo's for security (will probably never happen)
 *  - Use HTTPS client to download binaries
 *  - Authenticate both client and server
 *  - Encrypt and sign Binaries
 *  - Check signature & Decrypt binaries on the fly using hardware AES
 *
 */
 

#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <M5Stack.h>
#include "M5StackUpdater.h"

SDUpdater sdUpdater;
HTTPClient http;

const String API_URL = "https://phpsecu.re/m5stack/sd-updater/";

bool done = false;


unsigned char disk00_jpg[1775] = {
  0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
  0x01, 0x01, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
  0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0xdb, 0x00, 0x43, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x1e, 0x00, 0x1e, 0x03,
  0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4, 0x00,
  0x1f, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x10, 0x00,
  0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00,
  0x00, 0x01, 0x7d, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21,
  0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81,
  0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24,
  0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25,
  0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a,
  0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56,
  0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
  0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86,
  0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
  0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3,
  0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6,
  0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
  0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1,
  0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xc4, 0x00,
  0x1f, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x11, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00,
  0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31,
  0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08,
  0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15,
  0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18,
  0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39,
  0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55,
  0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
  0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84,
  0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
  0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa,
  0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4,
  0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
  0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
  0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xda, 0x00,
  0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00, 0xfe,
  0xc7, 0x7f, 0x6f, 0xc0, 0x7f, 0xe1, 0x45, 0x78, 0x04, 0x16, 0x04, 0xaf,
  0xed, 0xaf, 0xff, 0x00, 0x04, 0xd4, 0x0d, 0xb7, 0x20, 0x93, 0xff, 0x00,
  0x0f, 0x16, 0xfd, 0x95, 0xf2, 0x06, 0x64, 0x24, 0x65, 0x8a, 0xb9, 0x0e,
  0x64, 0x25, 0x41, 0x03, 0x2c, 0x55, 0xc7, 0xa9, 0xfe, 0xd7, 0x7a, 0xff,
  0x00, 0xc5, 0x4f, 0x09, 0xfe, 0xc9, 0xff, 0x00, 0xb4, 0xff, 0x00, 0x8a,
  0xbe, 0x05, 0x43, 0xad, 0xdc, 0xfc, 0x6f, 0xf0, 0xcf, 0xec, 0xf1, 0xf1,
  0xab, 0xc4, 0x1f, 0x07, 0x2d, 0xfc, 0x37, 0xe1, 0xa8, 0xfc, 0x6d, 0xe2,
  0x29, 0xfe, 0x2a, 0xe8, 0xdf, 0x0d, 0xbc, 0x4b, 0xa8, 0xfc, 0x3d, 0x87,
  0x40, 0xf0, 0x64, 0xfa, 0x66, 0xb7, 0x07, 0x8b, 0xb5, 0xa9, 0x7c, 0x5d,
  0x6d, 0xa4, 0x26, 0x97, 0xe1, 0x89, 0xb4, 0x5d, 0x5e, 0x2d, 0x7e, 0xf9,
  0xa0, 0xd2, 0xa4, 0xd2, 0xef, 0xd2, 0xec, 0xda, 0x4b, 0xe4, 0xff, 0x00,
  0xb4, 0xaf, 0xc5, 0x3f, 0x0c, 0xeb, 0xba, 0xb6, 0xbb, 0xfb, 0x33, 0xc7,
  0xfb, 0x34, 0xfc, 0x6c, 0xfd, 0xaa, 0x35, 0xcf, 0xf8, 0x42, 0xbc, 0x0f,
  0xf1, 0x2f, 0xe2, 0x27, 0x86, 0x3e, 0x0c, 0x6b, 0xff, 0x00, 0x07, 0xbc,
  0x0d, 0xaa, 0x7c, 0x2a, 0xd0, 0xbc, 0x4b, 0xe3, 0x2f, 0x14, 0xc5, 0xf0,
  0x4b, 0xc7, 0xb0, 0xf8, 0xf3, 0xe3, 0x37, 0xc7, 0xdf, 0xd9, 0xda, 0xeb,
  0x43, 0xf1, 0x9d, 0xd7, 0xc4, 0x0f, 0x83, 0x1e, 0x39, 0xf1, 0x17, 0xc2,
  0xef, 0x15, 0xfc, 0x12, 0xf1, 0x4e, 0xa7, 0xf1, 0x1b, 0xe1, 0x6f, 0x8d,
  0x7e, 0x13, 0x58, 0xf8, 0xde, 0xe2, 0xf3, 0xe1, 0xb6, 0xb3, 0x27, 0xc3,
  0x6d, 0x6f, 0x5d, 0xf8, 0xbc, 0xfc, 0x2c, 0x18, 0xc0, 0xfd, 0x84, 0x7f,
  0xe0, 0xb5, 0xb9, 0x20, 0x95, 0xcf, 0xfc, 0x15, 0x95, 0x1b, 0x3d, 0x00,
  0x3b, 0x5f, 0xfe, 0x0b, 0x48, 0xe8, 0xc3, 0x25, 0x78, 0x64, 0x64, 0x39,
  0x01, 0x95, 0x81, 0xc1, 0x00, 0xf2, 0x9f, 0x12, 0x78, 0xbb, 0xc0, 0x1a,
  0xdd, 0xa7, 0xc4, 0xaf, 0x0f, 0xfe, 0xce, 0x5f, 0x1a, 0xf5, 0xbf, 0x8f,
  0xbf, 0xb2, 0x8e, 0x83, 0xfb, 0x43, 0xff, 0x00, 0xc1, 0x12, 0xb5, 0x9f,
  0x0a, 0x78, 0xe6, 0x6f, 0xda, 0x27, 0xc6, 0xdf, 0xb5, 0x9f, 0x87, 0x2c,
  0xbf, 0x68, 0x5f, 0x12, 0xff, 0x00, 0xc1, 0x50, 0xb4, 0xab, 0x2f, 0x8e,
  0x3e, 0x0e, 0xd2, 0xbe, 0x3f, 0x78, 0xf7, 0xc7, 0xbf, 0x16, 0x3c, 0x48,
  0x75, 0x8d, 0x1f, 0xe1, 0xb7, 0x85, 0xff, 0x00, 0x66, 0x6d, 0x6b, 0x5e,
  0xf8, 0x41, 0x0f, 0xc4, 0x09, 0x74, 0x8f, 0x00, 0xd8, 0xf8, 0x8b, 0xc3,
  0x3e, 0x30, 0xd3, 0xfc, 0x1f, 0xe1, 0xeb, 0x8f, 0x8b, 0x5a, 0xae, 0xb5,
  0xe3, 0x5f, 0xaf, 0x3f, 0xe0, 0xa2, 0x9f, 0xf0, 0x48, 0x7f, 0xd9, 0x0b,
  0xfe, 0x0a, 0x6e, 0xde, 0x04, 0xd5, 0x7e, 0x3d, 0x69, 0xbe, 0x33, 0xf0,
  0x9f, 0xc4, 0x1f, 0x87, 0x62, 0x5d, 0x3b, 0x42, 0xf8, 0xb3, 0xf0, 0x87,
  0x51, 0xf0, 0xaf, 0x86, 0xfe, 0x21, 0xde, 0x78, 0x36, 0x56, 0xd4, 0xee,
  0x26, 0xf8, 0x73, 0xe2, 0x3d, 0x43, 0xc5, 0x9e, 0x0b, 0xf1, 0xe6, 0x87,
  0xe2, 0x2f, 0x06, 0xdb, 0xeb, 0x9a, 0x94, 0x9e, 0x24, 0xd2, 0x2d, 0x35,
  0x6f, 0x0f, 0xdc, 0xea, 0xbe, 0x17, 0xd7, 0x24, 0xd5, 0x6e, 0x7c, 0x17,
  0xad, 0x78, 0x7a, 0xcb, 0xc6, 0x3e, 0x3f, 0xb0, 0xf1, 0x57, 0x98, 0x78,
  0x6f, 0xc0, 0xb0, 0x78, 0x6b, 0xc4, 0x9e, 0x1f, 0xf1, 0x29, 0xff, 0x00,
  0x82, 0x71, 0xff, 0x00, 0xc1, 0x56, 0xfc, 0x79, 0x71, 0xe1, 0xbd, 0x63,
  0x4a, 0xf1, 0x36, 0x8f, 0xa0, 0xfc, 0x61, 0xff, 0x00, 0x82, 0x82, 0xfc,
  0x2a, 0xf8, 0xed, 0xf0, 0xfe, 0x3f, 0x10, 0xe8, 0x57, 0xf1, 0xeb, 0x7e,
  0x17, 0xf1, 0x0e, 0xa1, 0xf0, 0xc3, 0xe3, 0x5f, 0xfc, 0x15, 0xcf, 0xc7,
  0xbf, 0x0e, 0x35, 0x6d, 0x73, 0xc2, 0x3e, 0x23, 0xb0, 0xd3, 0x7c, 0x5b,
  0xe0, 0xad, 0x73, 0x57, 0xf0, 0xa6, 0xa3, 0xa9, 0x78, 0x3b, 0xc6, 0x9a,
  0x2f, 0x87, 0xfc, 0x69, 0xe1, 0x7b, 0x8d, 0x27, 0xc5, 0xbe, 0x1c, 0xd0,
  0xf5, 0xad, 0x3f, 0xf4, 0x97, 0xe0, 0x6f, 0xc6, 0xdd, 0x33, 0xe3, 0x5e,
  0x99, 0xe3, 0x5f, 0xf8, 0xa3, 0x3c, 0x71, 0xf0, 0xd3, 0xc6, 0x7f, 0x0c,
  0x7c, 0x70, 0xdf, 0x0e, 0xbe, 0x28, 0xfc, 0x2e, 0xf8, 0x88, 0x3c, 0x1f,
  0x37, 0x8b, 0xfe, 0x1e, 0xf8, 0xce, 0x6f, 0x07, 0xf8, 0x3f, 0xe2, 0x46,
  0x91, 0xa3, 0xea, 0x9a, 0xb7, 0xc3, 0x6f, 0x1a, 0x7c, 0x46, 0xf8, 0x6f,
  0xad, 0x26, 0xbd, 0xf0, 0xc7, 0xe2, 0x27, 0xc3, 0xcf, 0x88, 0x1a, 0x75,
  0xe7, 0x81, 0xbe, 0x20, 0x78, 0xbf, 0x4a, 0xb3, 0xd2, 0x7c, 0x69, 0xa7,
  0xe8, 0x7a, 0xce, 0xa1, 0xa4, 0x78, 0xdb, 0x47, 0xf1, 0x67, 0x84, 0xbc,
  0x36, 0x01, 0xe3, 0x5e, 0x06, 0xe3, 0xfe, 0x0a, 0x2f, 0xfb, 0x56, 0x31,
  0x19, 0x51, 0xfb, 0x13, 0x7e, 0xc0, 0x60, 0xe7, 0x1b, 0x49, 0x5f, 0x8e,
  0x7f, 0xf0, 0x52, 0xb6, 0x65, 0x25, 0x8a, 0xae, 0x42, 0xb2, 0x92, 0x0b,
  0x00, 0x03, 0x02, 0x48, 0x07, 0x35, 0xf9, 0xd9, 0xff, 0x00, 0x05, 0x69,
  0xfd, 0x8c, 0xff, 0x00, 0x63, 0x9d, 0x7f, 0xc5, 0x1e, 0x21, 0xff, 0x00,
  0x82, 0x87, 0x7f, 0xc1, 0x46, 0x3c, 0x4d, 0xe3, 0x6f, 0x89, 0xff, 0x00,
  0xb2, 0x37, 0xec, 0xd3, 0xfb, 0x2f, 0xb7, 0xc3, 0xad, 0x1f, 0xf6, 0x5b,
  0xf0, 0xf9, 0xf8, 0xa9, 0xa6, 0x3d, 0x87, 0xc6, 0x2f, 0x15, 0xfc, 0x65,
  0xd3, 0x6e, 0x2c, 0xbe, 0x2b, 0x78, 0x37, 0xc4, 0x7f, 0x0f, 0x7e, 0x2e,
  0x78, 0x2a, 0x41, 0xe3, 0x8f, 0x89, 0x4f, 0xab, 0x78, 0x3f, 0xe0, 0x9d,
  0xce, 0x83, 0xaa, 0x69, 0x7a, 0x2f, 0x85, 0xb5, 0x13, 0xff, 0x00, 0x08,
  0xbf, 0x8a, 0x7e, 0x22, 0x78, 0xfb, 0x4d, 0xf0, 0xe7, 0x83, 0xed, 0x2e,
  0xbc, 0x3d, 0xfa, 0x1f, 0xe0, 0x40, 0x47, 0xfc, 0x14, 0x5f, 0xf6, 0xa7,
  0x7c, 0x2e, 0x5b, 0xf6, 0x2a, 0xfd, 0x81, 0x11, 0x8e, 0x46, 0xe0, 0x63,
  0xf8, 0xe7, 0xff, 0x00, 0x05, 0x27, 0x3b, 0x72, 0x50, 0xef, 0x54, 0xcc,
  0x92, 0x46, 0xc7, 0x6b, 0x79, 0x8c, 0xc1, 0xbe, 0x56, 0x1e, 0x5f, 0x69,
  0xfb, 0x65, 0xfe, 0xcf, 0x9a, 0xe7, 0xed, 0x51, 0xfb, 0x37, 0xfc, 0x47,
  0xf8, 0x0b, 0xe1, 0x7f, 0x1a, 0xf8, 0x27, 0xe1, 0xbe, 0xb9, 0xe3, 0xa5,
  0xf0, 0x7a, 0xd9, 0xf8, 0xc7, 0xe2, 0x17, 0xc0, 0x7f, 0x87, 0x5f, 0xb4,
  0xc7, 0x83, 0xb4, 0x65, 0xf0, 0xaf, 0x8e, 0xfc, 0x27, 0xe3, 0x4b, 0x84,
  0xd5, 0x7e, 0x0a, 0x7c, 0x57, 0x56, 0xf0, 0x07, 0x8d, 0x45, 0xf5, 0xae,
  0x89, 0x3e, 0x97, 0xa6, 0xff, 0x00, 0xc2, 0x43, 0x13, 0x8f, 0x0d, 0x6a,
  0x77, 0xf6, 0xbe, 0x2b, 0xd2, 0x16, 0x3d, 0x6b, 0x42, 0xd3, 0x98, 0x80,
  0x7c, 0x1d, 0xff, 0x00, 0x04, 0x34, 0xfd, 0x9f, 0x7e, 0x34, 0x7e, 0xcf,
  0x1f, 0xb1, 0xa7, 0x88, 0xb4, 0xaf, 0x8b, 0xff, 0x00, 0x0e, 0x75, 0x8f,
  0x81, 0x3a, 0x17, 0xc5, 0x3f, 0xda, 0x1b, 0xe2, 0xb7, 0xc7, 0x2f, 0x80,
  0x5f, 0xb3, 0x3f, 0x89, 0x7e, 0x20, 0xf8, 0xaf, 0xe2, 0x27, 0x88, 0xff,
  0x00, 0x66, 0x1f, 0xd9, 0xf7, 0xe2, 0x52, 0xf8, 0x53, 0x50, 0xf0, 0x27,
  0xc1, 0x3d, 0x7a, 0xff, 0x00, 0xc6, 0x76, 0x36, 0x7a, 0x9e, 0x8d, 0xad,
  0x69, 0x3a, 0xbd, 0xaf, 0x8a, 0x3c, 0x57, 0xab, 0xe8, 0xb7, 0x09, 0x0e,
  0xbc, 0xda, 0x8f, 0x8b, 0xae, 0x35, 0xdf, 0x88, 0x1a, 0x6e, 0x83, 0xf1,
  0x6b, 0x5e, 0xf1, 0xef, 0x86, 0xb4, 0x2f, 0xb0, 0xbf, 0x65, 0x60, 0x47,
  0xc7, 0x5f, 0xf8, 0x29, 0x5e, 0x46, 0x33, 0xfb, 0x6b, 0xf8, 0x0d, 0x86,
  0x7b, 0xaf, 0xfc, 0x3b, 0x9b, 0xf6, 0x02, 0x5c, 0x8f, 0x51, 0xb9, 0x58,
  0x67, 0xa6, 0x54, 0x8e, 0xa0, 0xd7, 0xd9, 0xcb, 0x8c, 0x90, 0x15, 0x59,
  0xc3, 0x64, 0xfc, 0xa1, 0x14, 0xbf, 0xef, 0x21, 0xdc, 0x3f, 0xd6, 0x1f,
  0x98, 0x47, 0xe5, 0xf2, 0x58, 0xa4, 0x47, 0x0a, 0x71, 0xfb, 0xb1, 0xf1,
  0x67, 0xec, 0xae, 0xad, 0xff, 0x00, 0x0b, 0xcf, 0xfe, 0x0a, 0x50, 0x54,
  0x2e, 0xe9, 0x3f, 0x6d, 0x5f, 0x02, 0x49, 0xf7, 0xca, 0x64, 0x0f, 0xf8,
  0x27, 0x4f, 0xec, 0x0a, 0xa1, 0xdd, 0xd6, 0x32, 0x4c, 0x85, 0x42, 0x29,
  0x50, 0xbb, 0x02, 0x22, 0x00, 0x49, 0x52, 0xce, 0x01, 0xff, 0xd9
}; 

unsigned char disk01_jpg[1486] = {
  0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
  0x01, 0x01, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
  0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0xdb, 0x00, 0x43, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x1e, 0x00, 0x1e, 0x03,
  0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4, 0x00,
  0x1f, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x10, 0x00,
  0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00,
  0x00, 0x01, 0x7d, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21,
  0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81,
  0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24,
  0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25,
  0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a,
  0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56,
  0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
  0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86,
  0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
  0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3,
  0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6,
  0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
  0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1,
  0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xc4, 0x00,
  0x1f, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x11, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00,
  0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31,
  0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08,
  0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15,
  0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18,
  0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39,
  0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55,
  0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
  0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84,
  0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
  0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa,
  0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4,
  0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
  0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
  0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xda, 0x00,
  0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00, 0xfe,
  0xc7, 0x7f, 0x6f, 0xc0, 0x7f, 0xe1, 0x45, 0x78, 0x04, 0x16, 0x04, 0xaf,
  0xed, 0xaf, 0xff, 0x00, 0x04, 0xd4, 0x0d, 0xb7, 0x20, 0x93, 0xff, 0x00,
  0x0f, 0x16, 0xfd, 0x95, 0xf2, 0x06, 0x64, 0x24, 0x65, 0x8a, 0xb9, 0x0e,
  0x64, 0x25, 0x41, 0x03, 0x2c, 0x55, 0xc7, 0xa9, 0xfe, 0xd7, 0x7a, 0xff,
  0x00, 0xc5, 0x4f, 0x09, 0xfe, 0xc9, 0xff, 0x00, 0xb4, 0xff, 0x00, 0x8a,
  0xbe, 0x05, 0x43, 0xad, 0xdc, 0xfc, 0x6f, 0xf0, 0xcf, 0xec, 0xf1, 0xf1,
  0xab, 0xc4, 0x1f, 0x07, 0x2d, 0xfc, 0x37, 0xe1, 0xa8, 0xfc, 0x6d, 0xe2,
  0x29, 0xfe, 0x2a, 0xe8, 0xdf, 0x0d, 0xbc, 0x4b, 0xa8, 0xfc, 0x3d, 0x87,
  0x40, 0xf0, 0x64, 0xfa, 0x66, 0xb7, 0x07, 0x8b, 0xb5, 0xa9, 0x7c, 0x5d,
  0x6d, 0xa4, 0x26, 0x97, 0xe1, 0x89, 0xb4, 0x5d, 0x5e, 0x2d, 0x7e, 0xf9,
  0xa0, 0xd2, 0xa4, 0xd2, 0xef, 0xd2, 0xec, 0xda, 0x4b, 0xe4, 0xff, 0x00,
  0xb4, 0xaf, 0xc5, 0x3f, 0x0c, 0xeb, 0xba, 0xb6, 0xbb, 0xfb, 0x33, 0xc7,
  0xfb, 0x34, 0xfc, 0x6c, 0xfd, 0xaa, 0x35, 0xcf, 0xf8, 0x42, 0xbc, 0x0f,
  0xf1, 0x2f, 0xe2, 0x27, 0x86, 0x3e, 0x0c, 0x6b, 0xff, 0x00, 0x07, 0xbc,
  0x0d, 0xaa, 0x7c, 0x2a, 0xd0, 0xbc, 0x4b, 0xe3, 0x2f, 0x14, 0xc5, 0xf0,
  0x4b, 0xc7, 0xb0, 0xf8, 0xf3, 0xe3, 0x37, 0xc7, 0xdf, 0xd9, 0xda, 0xeb,
  0x43, 0xf1, 0x9d, 0xd7, 0xc4, 0x0f, 0x83, 0x1e, 0x39, 0xf1, 0x17, 0xc2,
  0xef, 0x15, 0xfc, 0x12, 0xf1, 0x4e, 0xa7, 0xf1, 0x1b, 0xe1, 0x6f, 0x8d,
  0x7e, 0x13, 0x58, 0xf8, 0xde, 0xe2, 0xf3, 0xe1, 0xb6, 0xb3, 0x27, 0xc3,
  0x6d, 0x6f, 0x5d, 0xf8, 0xc0, 0xfc, 0x2b, 0x38, 0x38, 0xfd, 0x84, 0x3f,
  0xe0, 0xb5, 0xd9, 0xc1, 0xc6, 0x7f, 0xe0, 0xac, 0x8a, 0xc3, 0x3d, 0xbe,
  0x57, 0xff, 0x00, 0x82, 0xd2, 0x3a, 0x37, 0xd1, 0xd1, 0x94, 0xf4, 0x65,
  0x61, 0x90, 0x40, 0x3c, 0xa3, 0xc4, 0x9e, 0x2e, 0xf0, 0x06, 0xb7, 0x69,
  0xf1, 0x2b, 0xc3, 0xff, 0x00, 0xb3, 0x97, 0xc6, 0xbd, 0x6f, 0xe3, 0xef,
  0xec, 0xa3, 0xa0, 0xfe, 0xd0, 0xff, 0x00, 0xf0, 0x44, 0xad, 0x67, 0xc2,
  0x9e, 0x39, 0x9b, 0xf6, 0x89, 0xf1, 0xb7, 0xed, 0x67, 0xe1, 0xcb, 0x2f,
  0xda, 0x17, 0xc4, 0xbf, 0xf0, 0x54, 0x2d, 0x2a, 0xcb, 0xe3, 0x8f, 0x83,
  0xb4, 0xaf, 0x8f, 0xde, 0x3d, 0xf1, 0xef, 0xc5, 0x8f, 0x12, 0x1d, 0x63,
  0x47, 0xf8, 0x6d, 0xe1, 0x7f, 0xd9, 0x9b, 0x5a, 0xd7, 0xbe, 0x10, 0x43,
  0xf1, 0x02, 0x5d, 0x23, 0xc0, 0x36, 0x3e, 0x22, 0xf0, 0xcf, 0x8c, 0x34,
  0xff, 0x00, 0x07, 0xf8, 0x7a, 0xe3, 0xe2, 0xd6, 0xab, 0xad, 0x78, 0xd7,
  0xeb, 0xcf, 0xf8, 0x28, 0xa7, 0xfc, 0x12, 0x1f, 0xf6, 0x42, 0xff, 0x00,
  0x82, 0x9b, 0xb7, 0x81, 0x35, 0x5f, 0x8f, 0x5a, 0x6f, 0x8c, 0xfc, 0x27,
  0xf1, 0x07, 0xe1, 0xd8, 0x97, 0x4e, 0xd0, 0xbe, 0x2c, 0xfc, 0x21, 0xd4,
  0x7c, 0x2b, 0xe1, 0xbf, 0x88, 0x77, 0x9e, 0x0d, 0x95, 0xb5, 0x3b, 0x89,
  0xbe, 0x1c, 0xf8, 0x8f, 0x50, 0xf1, 0x67, 0x82, 0xfc, 0x79, 0xa1, 0xf8,
  0x8b, 0xc1, 0xb6, 0xfa, 0xe6, 0xa5, 0x27, 0x89, 0x34, 0x8b, 0x4d, 0x5b,
  0xc3, 0xf7, 0x3a, 0xaf, 0x85, 0xf5, 0xc9, 0x35, 0x5b, 0x9f, 0x05, 0xeb,
  0x5e, 0x1e, 0xb2, 0xf1, 0x8f, 0x8f, 0xec, 0x3c, 0x55, 0xe6, 0x3e, 0x1c,
  0xf0, 0x1c, 0x5e, 0x18, 0xf1, 0x26, 0x81, 0xe2, 0x67, 0xff, 0x00, 0x82,
  0x70, 0xff, 0x00, 0xc1, 0x57, 0x3c, 0x75, 0x71, 0xe1, 0xad, 0x67, 0x4b,
  0xf1, 0x26, 0x8f, 0xa0, 0xfc, 0x62, 0xff, 0x00, 0x82, 0x82, 0x7c, 0x2b,
  0xf8, 0xeb, 0xf0, 0xfe, 0x3f, 0x11, 0xe8, 0x17, 0xf1, 0x6b, 0x7e, 0x18,
  0xd7, 0xf5, 0x0f, 0x86, 0x1f, 0x1a, 0xff, 0x00, 0xe0, 0xae, 0x7e, 0x3d,
  0xf8, 0x6f, 0xab, 0x6b, 0xbe, 0x10, 0xf1, 0x1d, 0x8e, 0x97, 0xe2, 0xdf,
  0x05, 0xeb, 0x7a, 0xbf, 0x85, 0x35, 0x1d, 0x4f, 0xc1, 0xbe, 0x34, 0xd1,
  0xbc, 0x3d, 0xe3, 0x4f, 0x0c, 0x5c, 0x69, 0x3e, 0x2d, 0xf0, 0xee, 0x85,
  0xad, 0x69, 0xff, 0x00, 0xa4, 0x9f, 0x03, 0x7e, 0x36, 0xe9, 0x9f, 0x1a,
  0xf4, 0xcf, 0x1a, 0xff, 0x00, 0xc5, 0x19, 0xe3, 0x8f, 0x86, 0x9e, 0x33,
  0xf8, 0x63, 0xe3, 0x86, 0xf8, 0x75, 0xf1, 0x47, 0xe1, 0x77, 0xc4, 0x41,
  0xe0, 0xf9, 0xbc, 0x5f, 0xf0, 0xf7, 0xc6, 0x73, 0x78, 0x3f, 0xc1, 0xff,
  0x00, 0x12, 0x34, 0x8d, 0x1f, 0x54, 0xd5, 0xbe, 0x1b, 0x78, 0xd3, 0xe2,
  0x37, 0xc3, 0x7d, 0x69, 0x35, 0xef, 0x86, 0x3f, 0x11, 0x3e, 0x1e, 0x7c,
  0x40, 0xd3, 0xaf, 0x3c, 0x0d, 0xf1, 0x03, 0xc5, 0xfa, 0x55, 0x9e, 0x93,
  0xe3, 0x4d, 0x3f, 0x43, 0xd6, 0x75, 0x0d, 0x23, 0xc6, 0xda, 0x3f, 0x8b,
  0x3c, 0x25, 0xe1, 0xb0, 0x0f, 0x1b, 0xf0, 0x18, 0x3f, 0xf0, 0xf1, 0xaf,
  0xda, 0xa8, 0xe3, 0x8f, 0xf8, 0x62, 0x8f, 0xd8, 0x09, 0x73, 0xdb, 0x70,
  0xf8, 0xe9, 0xff, 0x00, 0x05, 0x2a, 0x24, 0x67, 0xd4, 0x06, 0x52, 0x47,
  0x50, 0x19, 0x4f, 0x42, 0x2b, 0xed, 0x8a, 0xf8, 0x8f, 0xc0, 0x60, 0xff,
  0x00, 0xc3, 0xc6, 0x3f, 0x6a, 0x77, 0xda, 0xa4, 0xb7, 0xec, 0x55, 0xfb,
  0x02, 0x23, 0x64, 0xf3, 0x94, 0xf8, 0xe7, 0xff, 0x00, 0x05, 0x27, 0x3b,
  0x4b, 0x6c, 0x25, 0xd1, 0x09, 0x92, 0x48, 0xd8, 0xed, 0x7d, 0xee, 0xc1,
  0xbe, 0x56, 0x1e, 0x5f, 0xdb, 0x7c, 0xfa, 0x0f, 0xcc, 0xff, 0x00, 0x85,
  0x00, 0x2d, 0x7c, 0x4f, 0xfb, 0x2b, 0x02, 0x3e, 0x3a, 0xff, 0x00, 0xc1,
  0x4a, 0xf2, 0x31, 0x9f, 0xdb, 0x5f, 0xc0, 0x6c, 0x33, 0xdd, 0x7f, 0xe1,
  0xdc, 0xdf, 0xb0, 0x12, 0xe4, 0x7a, 0x8d, 0xca, 0xc3, 0x3d, 0x32, 0xa4,
  0x75, 0x06, 0xbe, 0xd6, 0x3b, 0xb0, 0x70, 0xaa, 0x4e, 0x0f, 0x05, 0x88,
  0x07, 0xd8, 0x9d, 0xa7, 0x00, 0xf7, 0xe0, 0xfd, 0x0d, 0x7c, 0x49, 0xfb,
  0x2b, 0xab, 0x7f, 0xc2, 0xf3, 0xff, 0x00, 0x82, 0x94, 0x15, 0x0b, 0xba,
  0x4f, 0xdb, 0x57, 0xc0, 0x92, 0x7d, 0xf2, 0x99, 0x03, 0xfe, 0x09, 0xd3,
  0xfb, 0x02, 0xa8, 0x77, 0x75, 0x8c, 0x93, 0x21, 0x50, 0x8a, 0x54, 0x2e,
  0xc0, 0x88, 0x80, 0x12, 0x54, 0xb3, 0x80, 0x7f, 0xff, 0xd9
};

void wget (String bin_url, String appName) {
  //M5.Lcd.setCursor(0,0);
  Serial.println("Will download " + bin_url + " and save to SD as " + appName);
  http.begin(bin_url);
  int httpCode = http.GET();
  if(httpCode <= 0) {
    Serial.println("[HTTP] GET... failed");
    http.end();
    return;
  }
  if(httpCode != HTTP_CODE_OK) {
    Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str()); 
    http.end();
    return;
  }

  int len = http.getSize();
  if(len<=0) {
    Serial.println("Failed to read " + bin_url + " content is empty, aborting");
    http.end();
    return;
  }
  int httpSize = len;
  uint8_t buff[128] = { 0 };
  WiFiClient * stream = http.getStreamPtr();
  File myFile = SD.open(appName, FILE_WRITE);
  if(!myFile) {
    Serial.println("Failed to open " + appName + " for writing, aborting");
    http.end();
    myFile.close();
    return;
  }
  while(http.connected() && (len > 0 || len == -1)) {
    sdUpdater.M5SDMenuProgress(httpSize-len, httpSize);
    // get available data size
    size_t size = stream->available();
    if(size) {
      // read up to 128 byte
      int c = stream->readBytes(buff, ((size > sizeof(buff)) ? sizeof(buff) : size));
      // write it to SD
      myFile.write(buff, c);
      if(len > 0) {
        len -= c;
      }
    }
    delay(1);
  }
  myFile.close();
  Serial.println("Copy done...");
  http.end();
}



void getApp(String appURL) {
  http.begin(appURL);
  int httpCode = http.GET();
  if(httpCode <= 0) {
    Serial.println("[HTTP] GET... failed");
    http.end();
    return;
  }
  if(httpCode != HTTP_CODE_OK) {
    Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str()); 
    http.end();
  }
  String payload = http.getString();
  http.end();
  DynamicJsonBuffer jsonBuffer;
  JsonObject& root = jsonBuffer.parseObject(payload);
  if (!root.success()) {
    Serial.println(F("JSON Parsing failed!"));
    delay(10000);
    return;
  }
  uint16_t appsCount = root["apps_count"].as<uint16_t>();
  if(appsCount!=1) {
    Serial.println("appsCount misenumeration");
    return;
  }
  String base_url = root["base_url"].as<String>();
  uint16_t assets_count = root["apps"][0]["json_meta"]["assets_count"].as<uint16_t>();
  M5.Lcd.setCursor(0,0);
  for(uint16_t i=0;i<assets_count;i++) {
    String filePath = root["apps"][0]["json_meta"]["assets"][i]["path"].as<String>();
    String fileName = root["apps"][0]["json_meta"]["assets"][i]["name"].as<String>();
    size_t appSize  = root["apps"][0]["json_meta"]["assets"][i]["size"].as<size_t>();
    
    if(SD.exists(filePath + fileName) && false) {
      File myFile = SD.open(filePath + fileName);
      size_t mySize = myFile.size();
      myFile.close();
      if(mySize == appSize) {
        Serial.println("Skipping " + fileName);
        M5.Lcd.print("Skipping ");
        M5.Lcd.println(fileName);
        continue;
      } else {
        Serial.print("Updating ");
        M5.Lcd.print("Updating ");
      }
    } else {
      Serial.print("Creating ");
      M5.Lcd.print("Creating ");
    }
    Serial.println(fileName);
    M5.Lcd.println(fileName);
    wget (base_url + filePath + fileName, filePath + fileName);
  }

}



void syncAppRegistry() {
  http.begin(API_URL + "catalog.json");
  int httpCode = http.GET();
  if(httpCode <= 0) {
    http.end();
    Serial.printf("[HTTP] GET... failed");
    delay(10000);
    return;
  }
  Serial.printf("[HTTP] GET... code: %d\n", httpCode);
  if(httpCode != HTTP_CODE_OK) {
    Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str()); 
    http.end();
    delay(10000);
    return;
  }
  
  String payload = http.getString();
  http.end();
  //Serial.println(payload);
  DynamicJsonBuffer jsonBuffer;
  // Parse JSON object
  JsonObject& root = jsonBuffer.parseObject(payload);
  if (!root.success()) {
    Serial.println(F("JSON Parsing failed!"));
    delay(10000);
    return;
  }
  //Serial.println("Parsed JSON");
  uint16_t appsCount = root["apps_count"].as<uint16_t>();
  String base_url = root["base_url"].as<String>();
  Serial.println("Found " + String(appsCount) + " apps at " + base_url);
  for(uint16_t i=0;i<appsCount;i++) {
    String appName = root["apps"][i]["name"].as<String>();
    String appURL  = API_URL + appName + ".json";
    M5.Lcd.clear();
    Serial.print(appName);
    Serial.print(" ");
    getApp( appURL );
    
  }
  done = true;
  M5.Lcd.clear();
  M5.Lcd.setCursor(0,0);
  M5.Lcd.println("Synch finished");
  delay(1000);
  updateFromFS(SD);
  ESP.restart();
}




void setup() {
  unsigned long startup = millis();
  Serial.begin(115200);
  M5.begin();
  Wire.begin();
  if (digitalRead(BUTTON_A_PIN) == 0) {
    Serial.println("Will Load menu binary");
    updateFromFS(SD);
    ESP.restart();
  }
  unsigned long lastcheck = millis();
  bool toggle = true;

  while(!SD.begin(TFCARD_CS_PIN)) {
    // TODO: make a more fancy animation
    unsigned long now = millis();
    toggle = !toggle;
    uint16_t color = toggle ? BLACK : WHITE;
    M5.Lcd.setCursor(10,100);
    M5.Lcd.setTextColor(color);
    M5.Lcd.print("INSERT SD");
    if(toggle) {
      M5.Lcd.drawJpg(disk01_jpg, 1775, 160, 100);
      delay(300);
    } else {
      M5.Lcd.drawJpg(disk00_jpg, 1775, 160, 100);
      delay(500);
    }
    // go to sleep after a minute, no need to hammer the SD Card reader
    if(lastcheck+60000<now) {
      Serial.println("Will go to sleep");
      M5.setWakeupButton(BUTTON_B_PIN);
      M5.powerOFF();
    }
  }
  WiFi.mode(WIFI_STA);
  WiFi.begin(); // set SSID/PASS from another app (i.e. WiFi Manager) and reload this app

  M5.Lcd.clear();
  M5.Lcd.setCursor(0,0);
  M5.Lcd.setTextColor(WHITE, BLACK);
  M5.Lcd.println("Waiting for WiFi to connect");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Establishing connection to WiFi..");
    if(startup + 30000 < millis()) {
      Serial.println("Been waiting too long for WiFi, will restart");
      M5.Lcd.println("Waiting too long, will restart");
      delay(1000);
      ESP.restart();
    }
  }
  M5.Lcd.setTextFont(2);
  M5.Lcd.println("connected to wifi");
  Serial.println("connected to wifi");
  if(SD.begin()) {
    Serial.println("SD detected");
    M5.Lcd.println("SD detected");
  }
  http.setReuse(true);
}

void loop() {
  if(!done) {
    syncAppRegistry();
  }
}
